openapi: 3.0.0
info:
  version: 1.0.0
  title: Student API
  
tags:
- name: "student"
  description: "Operations with a student"
- name: "user"
  description: "Operations with a user"
- name: "university"
  description: "Operations with students"
  
paths:
  /student:
    description: Student resource
    post:
      tags:
      - "student"
      summary: "Create new student"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
                
      responses:
        200:
          description: Successfully created a new student
          
        400:
          description: Invalid input
      
      security:
      - user:
        - write:student
          
    put:
      tags:
      - "student"
      summary: "Update a student"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
                
      responses:
        200:
          description: Successfully updated student
          
        400:
          description: Invalid input
          
        404:
          description: Student not found 
          
      security:
      - user:
        - write:student
                
  /university/top:
    get:
      tags:
      - "university"
      summary: "Returns top x students"
      parameters:
      - name: count
        in: query
        description: Amount of students returned
        required: true
        schema:
          type: integer
          minimum: 1
            
      responses:
        200:
          description: Successfully pulled students' info
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
                  
        400:
          description: Invalid input
                  
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
                
      responses:
        200:
          description: Successfully created a new user
          
  /user/login:
    get:
      tags:
      - "user"
      summary: "Log user into system"
      parameters:
      - name: user
        in: query
        required: true
        schema:
          type: string
      - name: password
        in: query
        required: true
        schema:
          type: string
            
      responses:
        200:
          description: Successfully logged in user
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
                
        400:
          description: Invalid input
                
  /user/logout:
    get:
      tags:
      - user
      summary: Log out current logged in user session
      responses:
        200:
          description: Successfully logged out user
          
  /student/{id}:
    get:
      tags:
      - "student"
      summary: Get student by id
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
            
      responses:
        200:
          description: Successfully pulled student's info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
                
        400:
          description: Invalid input
          
        404:
          description: Student not found
                
    delete:
      tags:
      - "student"
      summary: "Remove student"
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
                
      responses:
        200:
          description: Successfully removed a student
          
        400:
          description: Invalid input
          
        404:
          description: Student not found
          
      security:
      - user:
        - write:student
          
  /user/{id}:
    put:
      tags:
      - "user"
      summary: Update user
      parameters:
      - name: id
        in: path
        schema:
          type: integer
        required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
                
      responses:
        200:
          description: Successfully created a new user
          
        400:
          description: Invalid input
          
        404:
          description: User not found
          
      security:
      - user:
        - write:student
          
    delete:
      tags:
      - "user"
      summary: Delete user
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
                
      responses:
        200:
          description: Successfully deleted user
          
        400:
          description: Invalid input
          
        404:
          description: Student not found
          
      security:
      - user:
        - write:student
                
components:
  schemas:
  
    User:
      type: object
      properties:
      
        id:
          type: integer
          
        name:
          type: string
    
        login:
          type: string
          
        password:
          type: string
        
        email:
          type: string
    
    Student:
      type: object
      properties:
        
        id:
          type: integer
                  
        name:
          type: string
        
        major:
          $ref: "#/components/schemas/Major"
        
        rating:
          type: integer
          
        marks:
          type: array
          items:
            $ref: "#/components/schemas/Mark"
          
    Major:
      type: object
      properties:
      
        id:
          type: integer
          
        name:
          type: string
          
    Mark:
      type: object
      properties:
      
        subject:
          $ref: "#/components/schemas/Subject"
          
        grade:
          type: integer
        
        
    Subject:
      type: object
      properties:
      
        id:
          type: integer
          
        name:
          type: string
          
  securitySchemes:
    user:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://
          scopes:
            write:student: modify student data
            write:user: modify / delete user data
            
            
                      
